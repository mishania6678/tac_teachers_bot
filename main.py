import pymysql

from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import MessageNotModified

from teacher import Teacher

from typing import Union

from threading import Thread
from datetime import datetime
from time import sleep

bot = Bot('1941908944:AAH-74UPpJW4ZcxUwx67lZdDTi_5Sib_S3o')
dp = Dispatcher(bot)

start_pressed = True
name_expected, selecting_expected, schedule_expected, = False, False, False
edit_classes, edit_schedule, add_lesson, delete_lesson, edit_lesson = False, False, False, False, False

name, subjects, classes, schedule = '', [], [], ''

new_classes_kb = False


def remove_ended_lessons():
    def lesson_ended():
        date = lesson_time.split(':')[0].strip()
        month = int(date.split('.')[1].strip())
        day = int(date.split('.')[0].strip())

        time = lesson_time.split(':')[1].strip()
        hour = int(time.split('.')[0].strip())
        minutes = int(time.split('.')[1].strip())

        return curr_datetime > datetime(2021, month, day, hour, minutes)

    while True:
        db = pymysql.connect(
            host='us-cdbr-east-04.cleardb.com',
            user='b1c96c8af48cba',
            password='c13f73de',
            database='heroku_805235abf2a3a56'
        )

        curr_date = datetime.now().date()
        curr_time = datetime.now().time()
        curr_datetime = datetime(curr_date.year, curr_date.month, curr_date.day, curr_time.hour,
                                 curr_time.minute, curr_time.second, curr_time.microsecond)

        with db.cursor() as cursor:
            cursor.execute('SELECT * FROM `T&C_teachers`')
            rows = cursor.fetchall()
            for row in rows:
                for lesson_time in row[4][:-1].split(';'):
                    lesson_time = lesson_time.strip()
                    try:
                        if not row[4]:
                            raise SyntaxError

                        if lesson_ended():
                            cursor.execute(f'UPDATE `T&C_teachers` SET lessons = '
                                           f'REPLACE(lessons, "{lesson_time};", "") WHERE name = "{row[0]}"')
                            db.commit()

                    except (IndexError, ValueError):
                        cursor.execute(f'UPDATE `T&C_teachers` SET lessons = REPLACE(lessons, "{lesson_time};", "") '
                                       f'WHERE name = "{row[0]}"')
                        db.commit()

                    except SyntaxError:
                        pass

        db.close()

        sleep(60)


def create_kb(*args, kb_type='reply', row_width=2, resize_keyboard=True, tick_places=None) -> \
        Union[types.InlineKeyboardMarkup, types.ReplyKeyboardMarkup]:
    if tick_places is None:
        tick_places = []

    kb = InlineKeyboardMarkup(row_width=row_width) if kb_type == 'inline' \
        else ReplyKeyboardMarkup(resize_keyboard=resize_keyboard, row_width=row_width)

    for i in range(0, len(args) - 1, row_width):
        if kb_type == 'inline':
            kb.add(*[InlineKeyboardButton(
                text=args[i + j][0] if args[i + j][0] not in tick_places else f'{args[i + j][0]}‚úÖ',
                callback_data=args[i + j][1]) for j in range(row_width)])
        else:
            kb.add(*[KeyboardButton(text=args[i + j]) for j in range(row_width)])

    if len(args) % 2 != 0 and row_width % 2 == 0:
        if kb_type == 'inline':
            kb.add(InlineKeyboardButton(text=args[-1][0] if args[-1][0] not in tick_places else f'{args[-1][0]}‚úÖ',
                                        callback_data=args[-1][1]))
        else:
            kb.add(KeyboardButton(text=args[-1]))

    return kb


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    global start_pressed, name_expected

    teachers = ['wargkul', 'nizhnitschek', 'maxbenival']
    if message.from_user.username not in teachers:
        await bot.send_message(message.chat.id, text='–¶–∏–º –±–æ—Ç–æ–º –º–æ–∂—É—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –ª–∏—à–µ –≤–∏–∫–ª–∞–¥–∞—á—ñ –æ–Ω–ª–∞–π–Ω-—à–∫–æ–ª–∏ T&C')

    if start_pressed:
        Thread(target=remove_ended_lessons).start()

        await bot.send_message(message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º\'—è —Ç–∞ –Ω—ñ–∫–Ω–µ–π–º —É —Ç–µ–ª–µ–≥—Ä–∞–º—ñ\n'
                                                     '–ü—Ä–∏–∫–ª–∞–¥: –ö–æ–ª—è, @nizhnitschek')
        name_expected = True
        start_pressed = False


@dp.message_handler(content_types=['text'])
async def text_handler(message: types.Message):
    global name_expected, selecting_expected, schedule_expected, new_classes_kb, \
        add_lesson, delete_lesson, edit_lesson, edit_classes, edit_schedule, name, subjects, classes, schedule

    try:
        if not (name_expected or selecting_expected or schedule_expected):
            if message.text == '–ó–º—ñ–Ω–∏—Ç–∏ –∫–ª–∞—Å–∏ üè´':
                edit_classes, edit_schedule, add_lesson, delete_lesson, edit_lesson = False, False, False, False, False

                new_classes_kb = True

                classes_kb = create_kb(
                    ('1', 'class 1'), ('2', 'class 2'), ('3', 'class 3'), ('4', 'class 4'), ('5', 'class 5'),
                    ('6', 'class 6'), ('7', 'class 7'), ('8', 'class 8'), ('9', 'class 9'), ('10', 'class 10'),
                    ('11', 'class 11'), ('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖÔ∏èÔ∏è', 'class –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖÔ∏è'),
                    kb_type='inline', tick_places=classes
                )

                await bot.send_message(message.chat.id, text='–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å–∏:', reply_markup=classes_kb)

            elif message.text == '–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ üìÖ':
                edit_classes, edit_schedule, add_lesson, delete_lesson, edit_lesson = False, True, False, False, False
                await bot.send_message(message.chat.id, text=f'–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥\n`{schedule}`',
                                       parse_mode='Markdown')

            elif message.text == '–î–æ–¥–∞—Ç–∏ —É—Ä–æ–∫ ‚ûï':
                edit_classes, edit_schedule, add_lesson, delete_lesson, edit_lesson = False, False, True, False, False
                await bot.send_message(message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É—Ä–æ–∫—É\n–ü—Ä–∏–∫–ª–∞–¥: 08.06: 10.00')

            elif message.text == '–í–∏–¥–∞–ª–∏—Ç–∏ —É—Ä–æ–∫ ‚ûñ':
                edit_classes, edit_schedule, add_lesson, delete_lesson, edit_lesson = False, False, False, True, False
                await bot.send_message(message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É—Ä–æ–∫—É\n–ü—Ä–∏–∫–ª–∞–¥: 08.06: 10.00')

            elif message.text == '–ó–º—ñ–Ω–∏—Ç–∏ —É—Ä–æ–∫ ‚úè':
                edit_classes, edit_schedule, add_lesson, delete_lesson, edit_lesson = False, False, False, False, True
                await bot.send_message(message.chat.id, text='–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É—Ä–æ–∫—É, —è–∫–∏–π —Ç—Ä–µ–±–∞ –∑–º—ñ–Ω–∏—Ç–∏, '
                                                             '–Ω–∞ —Ç–æ–π, –Ω–∞ —è–∫–∏–π —Ç—Ä–µ–±–∞ –∑–º—ñ–Ω–∏—Ç–∏'
                                                             '\n–ü—Ä–∏–∫–ª–∞–¥: 08.06: 10.00 -> 08.06: 16.00')

            elif edit_schedule:
                schedule = message.text.strip()
                teacher = Teacher(name.split(', ')[-1])
                teacher.edit_schedule(schedule.lower())
                await bot.send_message(message.chat.id, text='–†–æ–∑–∫–ª–∞–¥ –∑–º—ñ–Ω–µ–Ω–æ')
                edit_schedule = False

            elif add_lesson:
                if ':' not in message.text.strip().lower():
                    await bot.send_message(message.chat.id, text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —É—Ä–æ–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
                    raise SyntaxError

                teacher = Teacher(name.split(',')[-1].strip())
                teacher.add_lesson(message.text.strip().lower())
                await bot.send_message(message.chat.id, text='–£—Ä–æ–∫ –¥–æ–¥–∞–Ω–æ')
                add_lesson = False

            elif edit_lesson:
                if '->' not in message.text or not not ':' not in message.text.split('->')[0].strip().lower() \
                        or ':' not in message.text.strip('->')[0].strip().lower():
                    await bot.send_message(message.chat.id, text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —É—Ä–æ–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
                    raise SyntaxError

                teacher = Teacher(name.split(',')[-1].strip())

                state = teacher.edit_lesson(
                    message.text.split('->')[0].strip().lower(),
                    message.text.split('->')[1].strip().lower()
                )

                await bot.send_message(message.chat.id, text='–£—Ä–æ–∫ –∑–º—ñ–Ω–µ–Ω–æ' if state else '–í–≤–µ–¥–µ–Ω–æ—ó –¥–∞—Ç–∏ –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ')
                edit_lesson = False

            elif delete_lesson:
                if ':' not in message.text.strip().lower():
                    await bot.send_message(message.chat.id, text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ —É—Ä–æ–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
                    raise SyntaxError

                teacher = Teacher(name.split(',')[-1].strip())
                state = teacher.delete_lesson(message.text.strip().lower())
                await bot.send_message(message.chat.id, text='–£—Ä–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ' if state else '–¢–∞–∫–æ–≥–æ —É—Ä–æ–∫—É –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ')
                edit_lesson = False

            else:
                await bot.send_message(message.chat.id, text='–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–∏–±—Ä–∞–Ω–∞')

        else:
            if name_expected:
                if len(message.text.split()) != 2 or '@' not in message.text or ', ' not in message.text \
                        or message.text.index('@') < message.text.index(','):
                    await bot.send_message(message.chat.id, text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥—É —ñ–º–µ–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')
                    raise SyntaxError

                name = message.text.strip()

                subjs_kb = create_kb(
                    ('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'subject –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'),
                    ('–£–∫—Ä.–º–æ–≤–∞', 'subject –£–∫—Ä.–º–æ–≤–∞'),
                    ('–ê–Ω–≥–ª.–º–æ–≤–∞', 'subject –ê–Ω–≥–ª.–º–æ–≤–∞'),
                    ('–î–∞–ª—ñ ‚û°Ô∏è', 'subject –î–∞–ª—ñ ‚û°Ô∏è'),
                    kb_type='inline'
                )

                await bot.send_message(message.chat.id, text='–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∏, –Ω–∞ —è–∫–∏—Ö –≤–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç–µ—Å—å:',
                                       reply_markup=subjs_kb)

                name_expected, selecting_expected = False, True

            elif schedule_expected:
                schedule = message.text.strip()

                teacher = Teacher(name.split(',')[-1].strip())
                teacher.add_teacher(name=name, subjects=', '.join(subjects), classes=classes, schedule=schedule.strip())

                funcs_kb = create_kb('–ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ üìÖ', '–ó–º—ñ–Ω–∏—Ç–∏ –∫–ª–∞—Å–∏ üè´')
                funcs_kb.row(*[btn['text'] for btn in create_kb(
                    '–î–æ–¥–∞—Ç–∏ —É—Ä–æ–∫ ‚ûï', '–ó–º—ñ–Ω–∏—Ç–∏ —É—Ä–æ–∫ ‚úè', '–í–∏–¥–∞–ª–∏—Ç–∏ —É—Ä–æ–∫ ‚ûñ', row_width=3)['keyboard'][0]])
                await bot.send_message(message.chat.id, text='–í—ñ—Ç–∞—é! –í–∞—Å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ —É –±–∞–∑—É –≤—á–∏—Ç–µ–ª—ñ–≤ T&C!',
                                       reply_markup=funcs_kb)

                schedule_expected = False

    except (IndexError, ValueError):
        await bot.send_message(message.chat.id, text='–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑')

    except SyntaxError:
        pass


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('subject'))
async def subjects_keyboard_callback_data_handler(call: types.CallbackQuery):
    global subjects

    if call.data == 'subject –î–∞–ª—ñ ‚û°Ô∏è':
        classes_kb = create_kb(
            ('1', 'class 1'), ('2', 'class 2'), ('3', 'class 3'), ('4', 'class 4'), ('5', 'class 5'), ('6', 'class 6'),
            ('7', 'class 7'), ('8', 'class 8'), ('9', 'class 9'), ('10', 'class 10'), ('11', 'class 11'),
            ('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', 'class –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è'), ('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚û°Ô∏è', 'class –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚û°Ô∏è'),
            kb_type='inline', tick_places=classes
        )

        await bot.edit_message_text(chat_id=call.message.chat.id, text='–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å–∏:',
                                    message_id=call.message.message_id, reply_markup=classes_kb)

    else:
        subj = call.data.split()[1]
        if subj not in subjects:
            subjects.append(subj)
        else:
            subjects.remove(subj)

        subjs_kb = create_kb(
            ('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'subject –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'),
            ('–£–∫—Ä.–º–æ–≤–∞', 'subject –£–∫—Ä.–º–æ–≤–∞'),
            ('–ê–Ω–≥–ª.–º–æ–≤–∞', 'subject –ê–Ω–≥–ª.–º–æ–≤–∞'),
            ('–î–∞–ª—ñ ‚û°Ô∏è', 'subject –î–∞–ª—ñ ‚û°Ô∏è'),
            kb_type='inline', tick_places=subjects
        )

        try:
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text='–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∏, –Ω–∞ —è–∫–∏—Ö –≤–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç–µ—Å—å:', reply_markup=subjs_kb)
        except MessageNotModified:
            pass


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('class'))
async def classes_keyboard_callback_data_handler(call: types.CallbackQuery):
    global subjects, selecting_expected, schedule_expected

    if call.data == 'class –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è':
        subjs_kb = create_kb(
            ('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', 'subject –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'),
            ('–£–∫—Ä.–º–æ–≤–∞', 'subject –£–∫—Ä.–º–æ–≤–∞'),
            ('–ê–Ω–≥–ª.–º–æ–≤–∞', 'subject –ê–Ω–≥–ª.–º–æ–≤–∞'),
            ('–î–∞–ª—ñ ‚û°Ô∏è', 'subject –î–∞–ª—ñ ‚û°Ô∏è'),
            kb_type='inline', tick_places=subjects
        )

        await bot.edit_message_text(chat_id=call.message.chat.id, text='–í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç–∏, –Ω–∞ —è–∫–∏—Ö –≤–∏ —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç–µ—Å—å:',
                                    message_id=call.message.message_id, reply_markup=subjs_kb)

    elif call.data == 'class –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚û°Ô∏è':
        if not subjects or not classes:
            await bot.send_message(call.message.chat.id, text='–ù–µ –≤–∏–±—Ä–∞–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –∞–±–æ –∫–ª–∞—Å–∏')
        else:
            await bot.send_message(call.message.chat.id, text='–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä —Å—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥!')
            await bot.send_message(call.message.chat.id, text='–ù–∞–ø–∏—à—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑–∞–Ω—è—Ç—å '
                                                              '–ö–æ–∂–µ–Ω –¥–µ–Ω—å/–¥—ñ–∞–ø–∞–∑–æ–Ω –¥–Ω—ñ–≤ —á–µ—Ä–µ–∑ ; '
                                                              '–ú–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ ; —Ç–∞ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–æ—á–∫–∞, —è–∫ —É –ø—Ä–∏–∫–ª–∞–¥—ñ\n'
                                                              '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ—á–æ–∫ Shift+Enter\n'
                                                              '–ü—Ä–∏–∫–ª–∞–¥:\n'
                                                              '08.06-10.06: 10.00-19.00;\n11.06: 12.00-16.00;\n'
                                                              '12.06: 13.00-21.00;\n13.06, 14.06: 8.00-19.00')
            selecting_expected, schedule_expected = False, True

    elif call.data == 'class –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖÔ∏è':
        teacher = Teacher(name.split(',')[-1].strip())
        teacher.edit_classes(classes)
        await bot.send_message(call.message.chat.id, text='–ö–ª–∞—Å–∏ –∑–º—ñ–Ω–µ–Ω–æ')

    else:
        curr_class = call.data.split()[1]
        if curr_class not in classes:
            classes.append(curr_class)
        else:
            classes.remove(curr_class)

        if not new_classes_kb:
            classes_kb = create_kb(
                ('1', 'class 1'), ('2', 'class 2'), ('3', 'class 3'), ('4', 'class 4'), ('5', 'class 5'),
                ('6', 'class 6'),
                ('7', 'class 7'), ('8', 'class 8'), ('9', 'class 9'), ('10', 'class 10'), ('11', 'class 11'),
                ('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', 'class –ù–∞–∑–∞–¥ ‚¨ÖÔ∏è'), ('–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚û°Ô∏è', 'class –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚û°Ô∏è'),
                kb_type='inline', tick_places=classes
            )
        else:
            classes_kb = create_kb(
                ('1', 'class 1'), ('2', 'class 2'), ('3', 'class 3'), ('4', 'class 4'), ('5', 'class 5'),
                ('6', 'class 6'), ('7', 'class 7'), ('8', 'class 8'), ('9', 'class 9'), ('10', 'class 10'),
                ('11', 'class 11'), ('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖÔ∏èÔ∏è', 'class –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖÔ∏è'),
                kb_type='inline', tick_places=classes
            )

        try:
            await bot.edit_message_text(chat_id=call.message.chat.id, text='–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å–∏:',
                                        message_id=call.message.message_id, reply_markup=classes_kb)
        except MessageNotModified:
            pass


executor.start_polling(dp, skip_updates=True)
